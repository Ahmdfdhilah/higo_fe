"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/customers/page",{

/***/ "(app-pages-browser)/./src/services/customer.ts":
/*!**********************************!*\
  !*** ./src/services/customer.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CustomerService: function() { return /* binding */ CustomerService; },\n/* harmony export */   customerService: function() { return /* binding */ customerService; }\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./src/services/base.ts\");\n\n// Customer API Service\nclass CustomerService extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseApiService {\n    // Get all customers with pagination and filters\n    async getAllCustomers(pagination, filters) {\n        const params = {\n            ...pagination,\n            ...filters\n        };\n        return this.get(this.endpoint, params);\n    }\n    // Get customer by ID\n    async getCustomerById(id) {\n        return this.get(\"\".concat(this.endpoint, \"/\").concat(id));\n    }\n    // Create new customer\n    async createCustomer(customerData) {\n        return this.post(this.endpoint, customerData);\n    }\n    // Update customer\n    async updateCustomer(id, updateData) {\n        return this.put(\"\".concat(this.endpoint, \"/\").concat(id), updateData);\n    }\n    // Delete customer\n    async deleteCustomer(id) {\n        return this.delete(\"\".concat(this.endpoint, \"/\").concat(id));\n    }\n    // Get customer summary for dashboard\n    async getCustomerSummary() {\n        return this.get(\"\".concat(this.endpoint, \"/summary\"));\n    }\n    // CSV Import methods\n    async importCustomersFromCSV(file, options) {\n        const formData = new FormData();\n        formData.append(\"csvFile\", file);\n        if (options === null || options === void 0 ? void 0 : options.skipValidation) {\n            formData.append(\"skipValidation\", \"true\");\n        }\n        if ((options === null || options === void 0 ? void 0 : options.continueOnError) !== undefined) {\n            formData.append(\"continueOnError\", options.continueOnError.toString());\n        }\n        if (options === null || options === void 0 ? void 0 : options.batchSize) {\n            formData.append(\"batchSize\", options.batchSize.toString());\n        }\n        try {\n            const response = await this.api.post(\"\".concat(this.endpoint, \"/import/csv\"), formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                },\n                timeout: 600000\n            });\n            return response.data;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // Get import status\n    async getImportStatus(importId) {\n        return this.get(\"\".concat(this.endpoint, \"/import/status/\").concat(importId));\n    }\n    // Cancel import\n    async cancelImport(importId) {\n        return this.post(\"\".concat(this.endpoint, \"/import/cancel/\").concat(importId));\n    }\n    // Get active imports\n    async getActiveImports() {\n        return this.get(\"\".concat(this.endpoint, \"/import/active\"));\n    }\n    constructor(...args){\n        super(...args);\n        this.endpoint = \"/customers\";\n    }\n}\n// Export singleton instance\nconst customerService = new CustomerService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/customer.ts\n"));

/***/ })

});